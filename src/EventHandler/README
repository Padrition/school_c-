# System of Event Handling
These classes are ment to handle user input.
The design pattern behind it is called Composite.

## EventHandler.h
EventHandler.h is an interface for comunicating with the outside world.
It is an abstract class instances of which cannot be created.
It's children have abstract method *handle()*, whis is put to use
In **EventHandlerComposite** and **EventHandlerLeaf** classes.

Overall **EventHandler** is no more but an interface for the underlying architecture.

## EventHandlerComposite.h
EventHandlerComposite class is a successor of **EventHandler**.
It implements *handle()* method of **EventHander** by derivating implementation
Between it's 'children' that are stored in *eventChildres* vector.
It also implements method *listen()*, whose job is to monitor incomming events
With use of [ftxui](https://github.com/ArthurSonzogni/FTXUI) library.

## EventHandlerLeaf.h
EventHandlerLeaf.h is an abstract class that set ground for all event Classes.
Successors of this class shall handle the implementation of *handle()* method.
As well the successors will need to declare what event it is via *uniqueEvent*
field.